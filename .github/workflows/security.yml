name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 3 * * 1'  # Weekly security scan on Monday at 3 AM

permissions:
  contents: read
  security-events: write
  issues: write

jobs:
  # ============================================================================
  # Dependency Vulnerability Scanning
  # ============================================================================
  
  dependency-scan:
    name: Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit
          pip install -r requirements.txt
          
      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report
          
      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --format=cyclonedx-json --output=sbom.json || true
          
      - name: Upload vulnerability reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vulnerability-reports
          path: |
            safety-report.json
            pip-audit-report.json
            sbom.json
          retention-days: 90

  # ============================================================================
  # Static Application Security Testing (SAST)
  # ============================================================================
  
  sast-analysis:
    name: Static Application Security Testing
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml] semgrep
          
      - name: Run Bandit security linter
        run: |
          bandit -r src/ -f json -o bandit-report.json
          bandit -r src/ -f sarif -o bandit-results.sarif
          
      - name: Upload Bandit SARIF results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit
          
      - name: Run Semgrep security analysis
        run: |
          semgrep --config=auto --json --output=semgrep-report.json src/ || true
          semgrep --config=auto --sarif --output=semgrep-results.sarif src/ || true
          
      - name: Upload Semgrep SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep-results.sarif
          category: semgrep
          
      - name: Upload security scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sast-reports
          path: |
            bandit-report.json
            bandit-results.sarif
            semgrep-report.json
            semgrep-results.sarif
          retention-days: 90

  # ============================================================================
  # CodeQL Analysis
  # ============================================================================
  
  codeql-analysis:
    name: CodeQL Security Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  # ============================================================================
  # Container Security Scanning
  # ============================================================================
  
  container-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'  # Skip on PRs to avoid resource usage
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Build Docker image
        run: |
          docker build -t davinci-codex:latest .
          
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'davinci-codex:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
          category: 'trivy'
          
      - name: Run Trivy JSON report
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'davinci-codex:latest'
          format: 'json'
          output: 'trivy-report.json'
          
      - name: Upload container scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: container-scan-reports
          path: |
            trivy-results.sarif
            trivy-report.json
          retention-days: 90

  # ============================================================================
  # Secret Scanning
  # ============================================================================
  
  secret-scan:
    name: Secret Scanning
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for comprehensive scanning
          
      - name: Install truffleHog
        run: |
          curl -sSfL https://raw.githubusercontent.com/trufflesecurity/trufflehog/main/scripts/install.sh | sh -s -- -b /usr/local/bin
          
      - name: Run truffleHog secret scan
        run: |
          trufflehog git file://. --json --output=trufflehog-report.json || true
          
      - name: Install detect-secrets
        run: |
          pip install detect-secrets
          
      - name: Run detect-secrets baseline scan
        run: |
          detect-secrets scan --all-files --baseline .secrets.baseline || true
          
      - name: Upload secret scan reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: secret-scan-reports
          path: |
            trufflehog-report.json
            .secrets.baseline
          retention-days: 90

  # ============================================================================
  # License Compliance Scanning
  # ============================================================================
  
  license-scan:
    name: License Compliance Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Install license scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses licensecheck
          pip install -r requirements.txt
          
      - name: Generate license report
        run: |
          pip-licenses --format=json --output-file=license-report.json
          pip-licenses --format=csv --output-file=license-report.csv
          
      - name: Check for problematic licenses
        run: |
          licensecheck --zero || true
          
      - name: Upload license reports
        uses: actions/upload-artifact@v4
        with:
          name: license-reports
          path: |
            license-report.json
            license-report.csv
          retention-days: 90

  # ============================================================================
  # Security Report Generation
  # ============================================================================
  
  generate-security-report:
    name: Generate Security Summary Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, sast-analysis, secret-scan, license-scan]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all security reports
        uses: actions/download-artifact@v4
        with:
          path: security-reports/
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          
      - name: Generate security summary
        run: |
          python3 << 'EOF'
          import json
          import os
          from pathlib import Path
          from datetime import datetime
          
          # Collect all security scan results
          reports_dir = Path("security-reports")
          summary = {
              "scan_date": datetime.now().isoformat(),
              "repository": "${{ github.repository }}",
              "commit": "${{ github.sha }}",
              "scans": {}
          }
          
          # Process vulnerability reports
          if (reports_dir / "vulnerability-reports").exists():
              vuln_dir = reports_dir / "vulnerability-reports"
              summary["scans"]["vulnerabilities"] = {
                  "safety_report": (vuln_dir / "safety-report.json").exists(),
                  "pip_audit_report": (vuln_dir / "pip-audit-report.json").exists(),
                  "sbom_generated": (vuln_dir / "sbom.json").exists()
              }
          
          # Process SAST reports
          if (reports_dir / "sast-reports").exists():
              sast_dir = reports_dir / "sast-reports"
              summary["scans"]["sast"] = {
                  "bandit_report": (sast_dir / "bandit-report.json").exists(),
                  "semgrep_report": (sast_dir / "semgrep-report.json").exists()
              }
          
          # Process secret scan reports
          if (reports_dir / "secret-scan-reports").exists():
              secret_dir = reports_dir / "secret-scan-reports"
              summary["scans"]["secrets"] = {
                  "trufflehog_report": (secret_dir / "trufflehog-report.json").exists(),
                  "detect_secrets_baseline": (secret_dir / ".secrets.baseline").exists()
              }
          
          # Process license reports
          if (reports_dir / "license-reports").exists():
              license_dir = reports_dir / "license-reports"
              summary["scans"]["licenses"] = {
                  "license_report": (license_dir / "license-report.json").exists()
              }
          
          # Save summary
          with open("security-summary.json", "w") as f:
              json.dump(summary, f, indent=2)
          
          print("Security scan summary generated:")
          print(json.dumps(summary, indent=2))
          EOF
          
      - name: Upload security summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.json
          retention-days: 365
          
      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            if (fs.existsSync('security-summary.json')) {
              const summary = JSON.parse(fs.readFileSync('security-summary.json', 'utf8'));
              
              const comment = `## 🛡️ Security Scan Summary
              
              **Scan Date:** ${summary.scan_date}
              **Commit:** ${summary.commit.substring(0, 8)}
              
              **Completed Scans:**
              ${Object.entries(summary.scans).map(([type, results]) => 
                `- **${type.charAt(0).toUpperCase() + type.slice(1)}:** ${Object.values(results).every(v => v) ? '✅ Complete' : '⚠️ Partial'}`
              ).join('\n')}
              
              📋 Detailed reports are available in the workflow artifacts.
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }