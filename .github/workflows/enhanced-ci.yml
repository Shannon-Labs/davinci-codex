name: Enhanced CI/CD Pipeline

on:
  push:
    branches: [ main, develop, 'feature/*', 'hotfix/*' ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 0'  # Weekly security scan on Sunday at 2 AM
  workflow_dispatch:    # Allow manual triggering

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'
  POETRY_VERSION: '1.8.0'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # ============================================================================
  # Code Quality & Security Analysis
  # ============================================================================
  
  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis
          
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: quality-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            quality-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
            quality-${{ runner.os }}-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          # Additional tools for enhanced analysis
          pip install bandit[toml] safety vulture dead-code-detector
          
      - name: Run Ruff (Format & Lint)
        run: |
          python -m ruff check . --output-format=github
          python -m ruff format --check .
          
      - name: Run MyPy (Type Checking)
        run: |
          python -m mypy src/ --show-error-codes --show-error-context
          
      - name: Security scan with Bandit
        run: |
          python -m bandit -r src/ -f json -o bandit-report.json || true
          python -m bandit -r src/ -f sarif -o bandit-results.sarif || true
          
      - name: Upload Bandit SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: bandit-results.sarif
          category: bandit
          
      - name: Dependency vulnerability scan
        run: |
          python -m safety check --json --output safety-report.json || true
          
      - name: Dead code detection
        run: |
          python -m vulture src/ --min-confidence 80 || true
          
      - name: Upload security reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  # ============================================================================
  # Comprehensive Testing Matrix
  # ============================================================================
  
  test-matrix:
    name: Test Suite (${{ matrix.os }}, Python ${{ matrix.python-version }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        include:
          # Extended testing for specific combinations
          - os: ubuntu-latest
            python-version: '3.11'
            extended: true
            
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: test-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt', '**/pyproject.toml') }}
          restore-keys: |
            test-${{ runner.os }}-${{ matrix.python-version }}-
            test-${{ runner.os }}-
            
      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgl1-mesa-glx \
            libglib2.0-0 \
            libsm6 \
            libxext6 \
            libxrender-dev \
            libgomp1
            
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install libomp
          
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          # Testing dependencies
          pip install pytest-xdist pytest-benchmark pytest-cov pytest-html pytest-json-report
          
      - name: Run unit tests
        run: |
          python -m pytest tests/ \
            --cov=src \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            --junit-xml=test-results.xml \
            --html=test-report.html \
            --json-report --json-report-file=test-report.json \
            -n auto \
            --tb=short
            
      - name: Run extended tests
        if: matrix.extended
        run: |
          # Integration tests
          python -m pytest tests/integration/ -v --tb=short
          
          # Performance benchmarks
          python -m pytest tests/benchmarks/ --benchmark-only --benchmark-json=benchmark-results.json
          
          # Long-running validation tests
          python -m pytest tests/validation/ -v --tb=short
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
          path: |
            test-results.xml
            test-report.html
            test-report.json
            coverage.xml
            htmlcov/
            benchmark-results.json
          retention-days: 30
          
      - name: Upload coverage to Codecov
        if: matrix.extended
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          fail_ci_if_error: false

  # ============================================================================
  # Performance & Load Testing
  # ============================================================================
  
  performance-testing:
    name: Performance Testing
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          pip install pytest-benchmark memory-profiler
          
      - name: Run performance benchmarks
        run: |
          python -m pytest tests/benchmarks/ \
            --benchmark-only \
            --benchmark-json=benchmark-results.json \
            --benchmark-histogram=benchmark-histogram
            
      - name: Memory profiling
        run: |
          python -m memory_profiler tests/memory_profile.py > memory-report.txt || true
          
      - name: Simulation load testing
        run: |
          python -m davinci_codex.cli demo --all > simulation-performance.json
          
      - name: Upload performance reports
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports
          path: |
            benchmark-results.json
            benchmark-histogram.svg
            memory-report.txt
            simulation-performance.json
          retention-days: 30

  # ============================================================================
  # Documentation & Assets Building
  # ============================================================================
  
  build-documentation:
    name: Build Documentation
    runs-on: ubuntu-latest
    needs: [test-matrix]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -e .
          # Documentation dependencies
          pip install jupyter-book sphinx sphinx-rtd-theme myst-parser
          
      - name: Build Jupyter Book
        run: |
          make book
          
      - name: Build API documentation
        run: |
          sphinx-build -b html docs/api/ docs/api/_build/html/
          
      - name: Generate simulation gallery
        run: |
          python scripts/generate_simulation_gallery.py
          
      - name: Validate documentation links
        run: |
          # Install link checker
          pip install linkchecker
          # Check internal links
          linkchecker docs/book/_build/html/ --check-extern --no-warnings || true
          
      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: |
            docs/book/_build/html/
            docs/api/_build/html/
            artifacts/gallery/
          retention-days: 30

  # ============================================================================
  # Container & Package Building
  # ============================================================================
  
  build-packages:
    name: Build Distribution Packages
    runs-on: ubuntu-latest
    needs: [test-matrix]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine
          
      - name: Build packages
        run: |
          python -m build
          
      - name: Check package integrity
        run: |
          python -m twine check dist/*
          
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: distribution-packages
          path: dist/
          retention-days: 30

  # ============================================================================
  # Docker Image Building
  # ============================================================================
  
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-matrix]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============================================================================
  # Deployment Staging
  # ============================================================================
  
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-documentation, build-packages, build-docker]
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.davinci-codex.dev
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: ./deploy/docs/
          
      - name: Deploy to staging environment
        run: |
          # Placeholder for staging deployment
          echo "Deploying to staging environment..."
          # This would typically involve:
          # - Updating container images in staging cluster
          # - Running database migrations
          # - Updating static assets
          # - Running smoke tests
          
      - name: Run staging smoke tests
        run: |
          # Placeholder for smoke tests
          echo "Running staging smoke tests..."
          # curl -f https://staging.davinci-codex.dev/health || exit 1

  # ============================================================================
  # Production Deployment
  # ============================================================================
  
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://davinci-codex.dev
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: ./deploy/docs/
          
      - name: Deploy to production environment
        run: |
          # Placeholder for production deployment
          echo "Deploying to production environment..."
          
      - name: Run production smoke tests
        run: |
          # Placeholder for production smoke tests
          echo "Running production smoke tests..."

  # ============================================================================
  # Notification & Reporting
  # ============================================================================
  
  notify-completion:
    name: Notify Completion
    runs-on: ubuntu-latest
    needs: [code-quality, test-matrix, performance-testing, build-documentation, build-packages, build-docker]
    if: always()
    
    steps:
      - name: Generate pipeline report
        run: |
          echo "Pipeline execution completed with the following results:"
          echo "Code Quality: ${{ needs.code-quality.result }}"
          echo "Test Matrix: ${{ needs.test-matrix.result }}"
          echo "Performance Testing: ${{ needs.performance-testing.result }}"
          echo "Documentation Build: ${{ needs.build-documentation.result }}"
          echo "Package Build: ${{ needs.build-packages.result }}"
          echo "Docker Build: ${{ needs.build-docker.result }}"
          
      - name: Notify on failure
        if: failure()
        run: |
          echo "Pipeline failed. Check the logs for details."
          # This could integrate with Slack, Discord, or email notifications